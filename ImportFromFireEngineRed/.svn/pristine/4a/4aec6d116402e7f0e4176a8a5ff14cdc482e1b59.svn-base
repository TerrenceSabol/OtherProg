using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace ImportFromFireEngineRed
{
    public partial class Form1 : Form
    {
        List<int> ErroneousRows = new List<int>();
        
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            lblVersion.Text = "Version: " + Application.ProductVersion;
            
            btnImport.Enabled = false;
            progressBar1.Visible = false;
            progressBar1.Left = btnImport.Left;
            progressBar1.Top = btnImport.Top;
            progressBar1.Width = btnImport.Width;
            progressBar1.Height = btnImport.Height;

            WriteLog("--------");
            WriteLog("Import from Fire Engine Red Tool Initialized.", true);
            WriteLog("Tool version: " + Application.ProductVersion);
            WriteLog("Running under username: " + Environment.UserName);
        }

        private void btnBrowse_Click(object sender, EventArgs e)
        {
            openFileDialog1.Filter = "CSV Files (*.csv)|*.csv|All files (*.*)|*.*";
            openFileDialog1.Multiselect = false;
            openFileDialog1.FileName = "";
            openFileDialog1.ShowDialog();
            if (openFileDialog1.FileName == "")
            {
                //do nothing
            }
            else
            {
                txtFileLoc.Text = openFileDialog1.FileName;
                btnImport.Enabled = true;
                WriteLog("User selected " + txtFileLoc.Text);
            }
        }

        private void btnImport_Click(object sender, EventArgs e)
        {
            btnImport.Text = "Please Wait...";
            btnImport.Enabled = false;
            
            WriteLog("Checking CSV Headers...", true);
            if (Program.CheckFirstLine(txtFileLoc.Text))
            {
                WriteLog("CSV Headers okay.", true);
            }
            else
            {
                WriteLog("CSV Headers incorrect! Cannot continue.", true);
                btnImport.Text = "Import";
                //don't want to re-enable button because obviously this csv is garbage
                return;
            }

            //Reset errors list
            ErroneousRows.Clear();

            List<string[]> parsedFile = Program.parseCSV(txtFileLoc.Text);

            int numberOfProspects = parsedFile.Count - 1; //minus one because the first line is the header

            WriteLog("Found " + numberOfProspects.ToString() + " prospects.", true);
            Program.MessyRest(300);

            //show progressbar instead of button
            progressBar1.Visible = true;
            btnImport.Visible = false;

            progressBar1.Maximum = numberOfProspects;
            

            for (int i = 1; i <= numberOfProspects; i++) //start at one because the first(0) line is headers
            {
                progressBar1.Value = i;

                WriteLog("Parsing " + i.Ordinal() + " prospect (CSV row " + (i + 1) + ")", true);
                ParseLine(parsedFile, i);

                Program.MessyRest(200);
            }

            //Done Parsing.
            if (ErroneousRows.Count() > 0)
            {
                //Then we had some errors
                MessageBox.Show("The CSV File had some erroroneous rows. Those rows will now be exported to an errors.csv file. Please fix those rows.");
                //TODO: this
            }

            //show button instead of progressbar
            progressBar1.Visible = false;
            btnImport.Visible = true;

            WriteLog("Finished!", true);
            btnImport.Text = "Import";
            //don't want to re-enable button because don't want someone running same csv twice at once
        }




        private void ParseLine(List<string[]> parsedFile, int whichLine)
        {
            try
            {
                string strJenzIDNum;
                string[] thisLine = parsedFile[whichLine];
                
                WriteLog("Getting next available Jenzabar ID Number...");
                strJenzIDNum = Program.GetNextSeqNumber();
                
                #region NAME_MASTER
                WriteLog("Generating NAME_MASTER query...");
                string sqlInsertName = "INSERT INTO [dbo].[NAME_MASTER] (";
                sqlInsertName += "[ID_NUM], ";
                sqlInsertName += "[LAST_NAME], ";
                sqlInsertName += "[FIRST_NAME], ";
                sqlInsertName += "[MIDDLE_NAME], ";
                sqlInsertName += "[MOBILE_PHONE], ";
                sqlInsertName += "[EMAIL_ADDRESS], ";
                sqlInsertName += "[USER_NAME], ";
                sqlInsertName += "[JOB_NAME], ";
                sqlInsertName += "[JOB_TIME]"; 
                sqlInsertName += ") VALUES (";
                //ID_NUM
                sqlInsertName += strJenzIDNum.QuoteOrNull() + ", ";
                //LAST_NAME
                sqlInsertName += thisLine[Program.GetColumnIndexOf("Last Name")].RemoveAllQuotes().QuoteOrNull() + ", ";
                //FIRST_NAME
                sqlInsertName += thisLine[Program.GetColumnIndexOf("First Name")].RemoveAllQuotes().QuoteOrNull() + ", ";
                //MIDDLE_NAME
                sqlInsertName += thisLine[Program.GetColumnIndexOf("Middle Name")].RemoveAllQuotes().QuoteOrNull() + ", ";
                //MOBILE_PHONE
                sqlInsertName += thisLine[Program.GetColumnIndexOf("Cell Phone")].RemoveAllQuotes().QuoteOrNull() + ", ";
                //EMAIL_ADDRESS
                sqlInsertName += thisLine[Program.GetColumnIndexOf("Email Address")].RemoveAllQuotes().QuoteOrNull() + ", ";
                //USER_NAME
                sqlInsertName += Program.GetJobUsername().QuoteOrNull() + ", ";
                //JOB_NAME
                sqlInsertName += Program.JobName.QuoteOrNull() + ", ";
                //JOB_TIME
                sqlInsertName += DateTime.Now.ToSQLDatetime().QuoteOrNull() + ");";

                #endregion

                #region ADDRESS_MASTER
                WriteLog("Generating ADDRESS_MASTER query...");
                string sqlInsertAddress = "INSERT INTO [dbo].[ADDRESS_MASTER] (";
                sqlInsertAddress += "[ID_NUM], ";
                sqlInsertAddress += "[ADDR_CDE], ";
                sqlInsertAddress += "[ADDR_LINE_1], ";
                sqlInsertAddress += "[ADDR_LINE_2], ";
                sqlInsertAddress += "[CITY], ";
                sqlInsertAddress += "[STATE], ";
                sqlInsertAddress += "[ZIP], ";
                sqlInsertAddress += "[COUNTY], ";
                sqlInsertAddress += "[USER_NAME], ";
                sqlInsertAddress += "[JOB_NAME], ";
                sqlInsertAddress += "[JOB_TIME] ";
                sqlInsertAddress += ") VALUES (";
                //ID_NUM
                sqlInsertAddress += strJenzIDNum.QuoteOrNull() + ", ";
                //ADDR_CDE
                sqlInsertAddress += "*LHP".QuoteOrNull() + ", "; // *LHP = where they live
                //ADDR_LINE_1
                sqlInsertAddress += thisLine[Program.GetColumnIndexOf("Permanent Address_Address 1")].RemoveAllQuotes().QuoteOrNull() + ", ";
                //ADDR_LINE_2
                sqlInsertAddress += thisLine[Program.GetColumnIndexOf("Permanent Address_Address 2")].RemoveAllQuotes().QuoteOrNull() + ", ";
                //CITY
                sqlInsertAddress += thisLine[Program.GetColumnIndexOf("Permanent Address_City")].RemoveAllQuotes().QuoteOrNull() + ", ";
                //STATE
                sqlInsertAddress += thisLine[Program.GetColumnIndexOf("Permanent Address_State")].RemoveAllQuotes().QuoteOrNull() + ", ";
                //ZIP
                sqlInsertAddress += thisLine[Program.GetColumnIndexOf("Permanent Address_ZIP")].RemoveAllQuotes().QuoteOrNull() + ", ";
                //COUNTY
                sqlInsertAddress += thisLine[Program.GetColumnIndexOf("Permanent Address_County")].RemoveAllQuotes().QuoteOrNull() + ", ";
                //USER_NAME
                sqlInsertAddress += Program.GetJobUsername().QuoteOrNull() + ", ";
                //JOB_NAME
                sqlInsertAddress += Program.JobName.QuoteOrNull() + ", ";
                //JOB_TIME
                sqlInsertAddress += DateTime.Now.ToSQLDatetime().QuoteOrNull() + ");";

                #endregion

                #region BIOGRAPH_MASTER
                WriteLog("Generating BIOGRAPH_MASTER query...");
                string sqlInsertBiograph = "INSERT INTO [dbo].[BIOGRAPH_MASTER] (";
                sqlInsertBiograph += "[ID_NUM], ";
                sqlInsertBiograph += "[GENDER], ";
                sqlInsertBiograph += "[SSN], ";
                sqlInsertBiograph += "[BIRTH_DTE], ";
                sqlInsertBiograph += "[ETHNIC_GROUP], ";
                sqlInsertBiograph += "[RELIGION], ";
                sqlInsertBiograph += "[USER_NAME], ";
                sqlInsertBiograph += "[JOB_NAME], ";
                sqlInsertBiograph += "[JOB_TIME] ";
                sqlInsertBiograph += ") VALUES (";
                //ID_NUM
                sqlInsertBiograph += strJenzIDNum.QuoteOrNull() + ", ";
                //GENDER
                sqlInsertBiograph += thisLine[Program.GetColumnIndexOf("Gender")].RemoveAllQuotes().QuoteOrNull() + ", ";
                //SSN
                sqlInsertBiograph += thisLine[Program.GetColumnIndexOf("SSN")].RemoveAllQuotes().QuoteOrNull() + ", ";
                //BIRTH_DTE
                sqlInsertBiograph += thisLine[Program.GetColumnIndexOf("DOB")].RemoveAllQuotes().QuoteOrNull() + ", ";
                //ETHNIC_GROUP
                string strEthnic = DetermineEthnicGroup(
                    thisLine[Program.GetColumnIndexOf("Hispanic/Latino Status")],
                    thisLine[Program.GetColumnIndexOf("Ethnicity (American Indian or Alaska Native (including all Original Peoples of the Americas))")],
                    thisLine[Program.GetColumnIndexOf("Ethnicity (Asian (including Indian subcontinent and Phillippines))")],
                    thisLine[Program.GetColumnIndexOf("Ethnicity (Black of African American (including Africa and Caribbean))")],
                    thisLine[Program.GetColumnIndexOf("Ethnicity (Native Hawaiian or Other Pacific Islander (Original Peoples))")],
                    thisLine[Program.GetColumnIndexOf("Ethnicity (White (including Middle Eastern))")]);

                sqlInsertBiograph += strEthnic.QuoteOrNull() + ", ";

                //RELIGION
                sqlInsertBiograph += thisLine[Program.GetColumnIndexOf("Religious Preference")].RemoveAllQuotes().QuoteOrNull() + ", ";
                //USER_NAME
                sqlInsertBiograph += Program.GetJobUsername().QuoteOrNull() + ", ";
                //JOB_NAME
                sqlInsertBiograph += Program.JobName.QuoteOrNull() + ", ";
                //JOB_TIME
                sqlInsertBiograph += DateTime.Now.ToSQLDatetime().QuoteOrNull() + ");";

                #endregion

                #region CANDIDATE
                WriteLog("Generating CANDIDATE query...");
                string sqlInsertCandidate = "INSERT INTO [dbo].[CANDIDATE] (";
                sqlInsertCandidate += "[ID_NUM], ";
                sqlInsertCandidate += "[SOURCE_5], ";
                sqlInsertCandidate += "[SOURCE_DTE_5], ";
                sqlInsertCandidate += "[GRAD_YR_LAST_ORG], ";
                sqlInsertCandidate += "[HIGH_SCHOOL], ";
                sqlInsertCandidate += "[COUNSELOR_INITIALS], ";
                sqlInsertCandidate += "[RESIDENT_OF_STATE], ";
                sqlInsertCandidate += "[CUR_CAND_TYPE], ";
                sqlInsertCandidate += "[CUR_DEPT], ";
                sqlInsertCandidate += "[CUR_DIV], ";
                sqlInsertCandidate += "[CUR_LOC], ";
                sqlInsertCandidate += "[CUR_PROG], ";
                sqlInsertCandidate += "[CUR_STAGE], ";
                sqlInsertCandidate += "[CUR_TRM], ";
                sqlInsertCandidate += "[CUR_YR], ";
                sqlInsertCandidate += "[USER_NAME], ";
                sqlInsertCandidate += "[JOB_NAME], ";
                sqlInsertCandidate += "[JOB_TIME] ";
                sqlInsertCandidate += ") VALUES (";
                //ID_NUM
                sqlInsertCandidate += strJenzIDNum.QuoteOrNull() + ", ";
                //SOURCE_5
                sqlInsertCandidate += "1FERA".QuoteOrNull() + ", ";
                //SOURCE_DTE_5
                sqlInsertCandidate += DateTime.Now.ToSQLDatetime().QuoteOrNull() + ", ";
                //GRAD_YR_LAST_ORG
                //  In csv as 1988-07-04, we only want first four
                sqlInsertCandidate += thisLine[Program.GetColumnIndexOf("High School_Grad Date")].RemoveAllQuotes().GetFirst(4).QuoteOrNull() + ", ";
                //HIGH_SCHOOL
                string strHSCode = Program.GetHSCodeFromName(thisLine[Program.GetColumnIndexOf("High School_Name 1")].RemoveAllQuotes());
                sqlInsertCandidate += strHSCode.QuoteOrNull() + ", ";

                //COUNSELOR_INITIALS
                sqlInsertCandidate += "".QuoteOrNull() + ", ";
                //RESIDENT_OF_STATE
                sqlInsertCandidate += thisLine[Program.GetColumnIndexOf("Permanent Address_State")].RemoveAllQuotes().QuoteOrNull() + ", ";
                //CUR_CAND_TYPE
                sqlInsertCandidate += thisLine[Program.GetColumnIndexOf("Applicant Type")].RemoveAllQuotes().QuoteOrNull() + ", ";
                //CUR_DEPT
                sqlInsertCandidate += "".QuoteOrNull() + ", ";
                //CUR_DIV
                sqlInsertCandidate += "UG".QuoteOrNull() + ", ";
                //CUR_LOC
                sqlInsertCandidate += "MAIN".QuoteOrNull() + ", ";
                //CUR_PROG
                //like MUSCH
                sqlInsertCandidate += thisLine[Program.GetColumnIndexOf("Major")].RemoveAllQuotes().QuoteOrNull() + ", ";
                //CUR_TRM
                sqlInsertCandidate += thisLine[Program.GetColumnIndexOf("Entry Term")].RemoveAllQuotes().GetLast(2).QuoteOrNull() + ", ";
                //CUR_YR
                sqlInsertCandidate += thisLine[Program.GetColumnIndexOf("Entry Term")].RemoveAllQuotes().GetFirst(4).QuoteOrNull() + ", ";
                //USER_NAME
                sqlInsertCandidate += Program.GetJobUsername().QuoteOrNull() + ", ";
                //JOB_NAME
                sqlInsertCandidate += Program.JobName.QuoteOrNull() + ", ";
                //JOB_TIME
                sqlInsertCandidate += DateTime.Now.ToSQLDatetime().QuoteOrNull() + ");";


                #endregion

                #region CANDIDACY
                WriteLog("Generating CANDIDACY query...");
                string sqlInsertCandidacy = "INSERT INTO [dbo].[CANDIDACY] (";
                sqlInsertCandidacy += "[ID_NUM], ";
                sqlInsertCandidacy += "[CANDIDACY_TYPE], ";
                sqlInsertCandidacy += "[DEPT_CDE], ";
                sqlInsertCandidacy += "[DIV_CDE], ";
                sqlInsertCandidacy += "[LOCA_CDE], ";
                sqlInsertCandidacy += "[PROG_CDE], ";
                sqlInsertCandidacy += "[STAGE], ";
                sqlInsertCandidacy += "[TRM_CDE], ";
                sqlInsertCandidacy += "[YR_CDE], ";
                sqlInsertCandidacy += "[HIST_STAGE_DTE], ";
                sqlInsertCandidacy += "[CUR_CANDIDACY], ";
                sqlInsertCandidacy += "[USER_NAME], ";
                sqlInsertCandidacy += "[JOB_NAME], ";
                sqlInsertCandidacy += "[JOB_TIME] ";
                sqlInsertCandidacy += ") VALUES (";
                //ID_NUM
                sqlInsertCandidacy += strJenzIDNum.QuoteOrNull() + ", ";
                //CANDIDACY_TYPE
                sqlInsertCandidacy += thisLine[Program.GetColumnIndexOf("Applicant Type")].RemoveAllQuotes().QuoteOrNull() + ", ";
                //DEPT_CDE
                sqlInsertCandidacy += "".QuoteOrNull() + ", ";
                //DIV_CDE
                sqlInsertCandidacy += "UG".QuoteOrNull() + ", ";
                //LOCA_CDE
                sqlInsertCandidacy += "MAIN".QuoteOrNull() + ", ";
                //PROG_CDE
                //TODO: look this up
                sqlInsertCandidacy += "UND".QuoteOrNull() + ", ";
                //STAGE
                //TODO: Calculate from grad date vs now data
                sqlInsertCandidacy += "05".QuoteOrNull() + ", ";
                //TRM_CDE
                sqlInsertCandidacy += thisLine[Program.GetColumnIndexOf("Entry Term")].RemoveAllQuotes().GetLast(2).QuoteOrNull() + ", ";
                //YR_CDE
                sqlInsertCandidacy += thisLine[Program.GetColumnIndexOf("Entry Term")].RemoveAllQuotes().GetFirst(4).QuoteOrNull() + ", ";
                //HIST_STAGE_DTE
                sqlInsertCandidacy += DateTime.Now.ToSQLDatetime().QuoteOrNull() + ", ";
                //CUR_CANDIDACTY
                sqlInsertCandidacy += "Y".QuoteOrNull() + ", ";
                //USER_NAME
                sqlInsertCandidacy += Program.GetJobUsername().QuoteOrNull() + ", ";
                //JOB_NAME
                sqlInsertCandidacy += Program.JobName.QuoteOrNull() + ", ";
                //JOB_TIME
                sqlInsertCandidacy += DateTime.Now.ToSQLDatetime().QuoteOrNull() + ");";



                #endregion

                //Now execute these queries
                WriteLog("Executing insert queries...");
                WriteLog(sqlInsertName);
                Program.ExecuteQuery(sqlInsertName);

                WriteLog(sqlInsertAddress);
                Program.ExecuteQuery(sqlInsertAddress);
                
                WriteLog(sqlInsertBiograph);
                Program.ExecuteQuery(sqlInsertBiograph);
                
                WriteLog(sqlInsertCandidate);
                Program.ExecuteQuery(sqlInsertCandidate);
                
                WriteLog(sqlInsertCandidacy);
                Program.ExecuteQuery(sqlInsertCandidacy);

                WriteLog(whichLine.Ordinal() + " candidate successfully added to the Jenzabar database.");
                return;
            }
            catch
            {
                //Was unable to write this candidate record.
                WriteLog(whichLine.Ordinal() + " candidate could not be written to the Jenzabar database." , true);

                //add this row to errors csv
                ErroneousRows.Add(whichLine);
                return;
            }
        }

        private string DetermineEthnicGroup(string HisLatStat, string AmInAlaskaNat, string Asian, string Black, string PacificIs, string White)
        {
            //If more than one of these are true then return M
            int count = 0;
            if (HisLatStat == "Yes") { count++; }
            if (AmInAlaskaNat == "Yes") { count++; }
            if (Asian == "Yes") { count++; }
            if (Black == "Yes") { count++; }
            if (PacificIs == "Yes") { count++; }
            if (White == "Yes") { count++; }

            if (count > 1) { return "M"; }

            //Otherwise, break it down
            if (HisLatStat == "Yes") { return "4"; }
            if (AmInAlaskaNat == "Yes") { return "2"; }
            if (Asian == "Yes") { return "2"; }
            if (Black == "Yes") { return "1"; }
            if (PacificIs == "Yes") { return "3"; }
            if (White == "Yes") { return "5"; }

            //Otherwise, 'Race Unknown'
            return "8";
        }

        /// <summary>
        /// Writes to the file log
        /// </summary>
        /// <param name="LogText">Text to log</param>
        /// <param name="ShowInUserLog">Optional. If true, writes log to textbox also. Default = false.</param>
        private void WriteLog(string LogText, Boolean ShowInUserLog = false)
        {
            try
            {
                string strFileName = System.AppDomain.CurrentDomain.FriendlyName + ".log.txt";
                using (StreamWriter w = File.AppendText(strFileName))
                {
                    w.WriteLine(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + " - " + LogText);
                }

                if (ShowInUserLog)
                {
                    txtLog.AppendText(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + " - " + LogText + "\n\n");
                }
            }
            catch
            {
                MessageBox.Show("Error! Unable to write to log file. This tool will now exit.");
                Program.CommitSuicide();
            }
        }


    }
}
